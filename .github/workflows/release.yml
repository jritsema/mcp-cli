name: Build and Release

on:
  push:
    branches: [ fix-github-actions ]

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'
          check-latest: true

      - name: Get version
        id: get_version
        run: |
          VERSION=$(git describe --tags --always --dirty | sed 's/^v//')
          if [ -z "$VERSION" ]; then
            VERSION=$(date +'%Y%m%d%H%M%S')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build for macOS (AMD64)
        run: |
          GOOS=darwin GOARCH=amd64 go build -o mcp-darwin-amd64 -ldflags="-X 'main.Version=${{ env.VERSION }}'" .
          chmod +x mcp-darwin-amd64
          zip -j mcp-darwin-amd64.zip mcp-darwin-amd64

      - name: Build for macOS (ARM64)
        run: |
          GOOS=darwin GOARCH=arm64 go build -o mcp-darwin-arm64 -ldflags="-X 'main.Version=${{ env.VERSION }}'" .
          chmod +x mcp-darwin-arm64
          zip -j mcp-darwin-arm64.zip mcp-darwin-arm64

      - name: Build for Linux (AMD64)
        run: |
          GOOS=linux GOARCH=amd64 go build -o mcp-linux-amd64 -ldflags="-X 'main.Version=${{ env.VERSION }}'" .
          chmod +x mcp-linux-amd64
          zip -j mcp-linux-amd64.zip mcp-linux-amd64

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            mcp-darwin-amd64.zip
            mcp-darwin-arm64.zip
            mcp-linux-amd64.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
